(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{375:function(e,t,r){"use strict";r.r(t);var a=r(40),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"this"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[e._v("#")]),e._v(" this")]),e._v(" "),r("h2",{attrs:{id:"从ecmascript规范解读this"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从ecmascript规范解读this"}},[e._v("#")]),e._v(" 从ECMAScript规范解读this")]),e._v(" "),r("h3",{attrs:{id:"规范8-7-reference规范类型-the-reference-specification-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范8-7-reference规范类型-the-reference-specification-type"}},[e._v("#")]),e._v(" 规范8.7 Reference规范类型 The Reference Specification Type")]),e._v(" "),r("blockquote",[r("p",[e._v("A Reference is a resolved name binding. A Reference consists of three components, the base value, the referenced name and the Boolean valued strict reference flag. The base value is either undefined, an Object, a Boolean, a String, a Number, or an environment record (10.2.1). A base value of undefined indicates that the reference could not be resolved to a binding. The referenced name is a String.")]),e._v(" "),r("p",[e._v("一个 引用 (Reference) 是个已解决的命名绑定。一个引用由三部分组成， 基 (base) 值， 引用名称（referenced name） 和布尔值 严格引用 (strict reference) 标志。**基值是 undefined, 一个 Object, 一个 Boolean, 一个 String, 一个 Number, 一个 environment record 中的任意一个。**基值是 undefined 表示此引用可以不解决一个绑定。引用名称是一个字符串。")])]),e._v(" "),r("blockquote",[r("ul",[r("li",[e._v("GetBase(V). Returns the base value component of the reference V.")])])]),e._v(" "),r("blockquote",[r("ul",[r("li",[e._v("HasPrimitiveBase(V). "),r("strong",[e._v("Returns true if the base value is a Boolean, String, or Number.")])])])]),e._v(" "),r("blockquote",[r("ul",[r("li",[e._v("IsPropertyReference(V). "),r("strong",[e._v("Returns true if either the base value is an object or HasPrimitiveBase(V) is true; otherwise returns false.")])])])]),e._v(" "),r("h3",{attrs:{id:"规范8-7-1-getvalue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范8-7-1-getvalue"}},[e._v("#")]),e._v(" 规范8.7.1 GetValue")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("获取Reference类型的值，调用这个方法后返回值将不再是Reference类型  \n")])])]),r("h3",{attrs:{id:"规范11-2-3函数调用-function-calls"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-2-3函数调用-function-calls"}},[e._v("#")]),e._v(" 规范11.2.3函数调用  Function Calls")]),e._v(" "),r("blockquote",[r("ol",[r("li",[e._v("Let ref be the result of evaluating MemberExpression.")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("计算MemberExpression并赋值给ref\n")])])]),r("blockquote",[r("ol",{attrs:{start:"6"}},[r("li",[e._v("If Type(ref) is Reference, then")])]),e._v(" "),r("ul",[r("li",[e._v("If IsPropertyReference(ref) is true, then\nLet thisValue be GetBase(ref).")]),e._v(" "),r("li",[e._v("Else, the base of ref is an Environment Record\nLet thisValue be the result of calling the ImplicitThisValue concrete method of\nGetBase(ref).")])])]),e._v(" "),r("blockquote",[r("ol",{attrs:{start:"7"}},[r("li",[e._v("Else, Type(ref) is not Reference.\nLet thisValue be undefined.")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("如果ref是Reference类型，且IsPropertyReference为真，则this的值为GetBase(ref); \n如果ref是Reference类型，且base value值是Environment Record，则this的值为ImplicitThisValue;\n如果ref不是Reference类型，则this的值是undefined \n")])])]),r("h3",{attrs:{id:"规范10-2-1-1-6-implicitthisvalue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范10-2-1-1-6-implicitthisvalue"}},[e._v("#")]),e._v(" 规范10.2.1.1.6 ImplicitThisValue()")]),e._v(" "),r("blockquote",[r("p",[e._v("Declarative Environment Records always return "),r("strong",[e._v("undefined")]),e._v(" as their ImplicitThisValue.")])]),e._v(" "),r("h3",{attrs:{id:"规范11-2-左值表达式-left-hand-side-expressions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-2-左值表达式-left-hand-side-expressions"}},[e._v("#")]),e._v(" 规范11.2 左值表达式  Left-Hand-Side Expressions")]),e._v(" "),r("blockquote",[r("p",[e._v("MemberExpression :\nPrimaryExpression\nFunctionExpression\nMemberExpression [ Expression ]\nMemberExpression . IdentifierName\nnew MemberExpression Arguments")])]),e._v(" "),r("h3",{attrs:{id:"规范11-2-1-属性访问-property-accessors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-2-1-属性访问-property-accessors"}},[e._v("#")]),e._v(" 规范11.2.1 属性访问  Property Accessors")]),e._v(" "),r("blockquote",[r("ol",{attrs:{start:"8"}},[r("li",[e._v("Return a value of type Reference whose base value is baseValue and whose referenced name is propertyNameString, and whose strict mode flag is strict.")])])]),e._v(" "),r("h3",{attrs:{id:"规范11-1-6-分组表达式-the-grouping-operator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-1-6-分组表达式-the-grouping-operator"}},[e._v("#")]),e._v(" 规范11.1.6 分组表达式 The Grouping Operator")]),e._v(" "),r("blockquote",[r("p",[e._v("Return the result of evaluating Expression. This may be of type Reference.")])]),e._v(" "),r("blockquote",[r("p",[e._v("This algorithm does not apply GetValue to the result of evaluating Expression.")])]),e._v(" "),r("h3",{attrs:{id:"规范11-13-1-简单赋值-simple-assignment"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-13-1-简单赋值-simple-assignment"}},[e._v("#")]),e._v(" 规范11.13.1 简单赋值 Simple Assignment")]),e._v(" "),r("blockquote",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("Let rval be GetValue(rref).")])])]),e._v(" "),r("h3",{attrs:{id:"规范-11-11-二元逻辑运算符-binary-logical-operators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范-11-11-二元逻辑运算符-binary-logical-operators"}},[e._v("#")]),e._v(" 规范 11.11 二元逻辑运算符 Binary Logical Operators")]),e._v(" "),r("blockquote",[r("p",[e._v("The production LogicalANDExpression : LogicalANDExpression && BitwiseORExpression is evaluated as follows:")])]),e._v(" "),r("blockquote",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("Let lval be GetValue(lref).")])])]),e._v(" "),r("p",[e._v("||运算符同上")]),e._v(" "),r("h3",{attrs:{id:"规范11-14-逗号运算符-comma-operator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范11-14-逗号运算符-comma-operator"}},[e._v("#")]),e._v(" 规范11.14 逗号运算符 Comma Operator")]),e._v(" "),r("blockquote",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("Call GetValue(lref).")])])]),e._v(" "),r("h3",{attrs:{id:"规范10-3-1-标识符解析-identifier-resolution"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范10-3-1-标识符解析-identifier-resolution"}},[e._v("#")]),e._v(" 规范10.3.1 标识符解析 Identifier Resolution")]),e._v(" "),r("blockquote",[r("p",[e._v("The result of evaluating an identifier is always a value of type Reference with its referenced name component equal to the Identifier String.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);