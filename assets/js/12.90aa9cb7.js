(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{377:function(t,a,s){"use strict";s.r(a);var n=s(40),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),s("h4",{attrs:{id:"什么是执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是执行上下文"}},[t._v("#")]),t._v(" 什么是执行上下文？")]),t._v(" "),s("p",[t._v("执行上下文，是评估和运行js代码的环境的抽象概念。")]),t._v(" "),s("h4",{attrs:{id:"执行上下文的种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的种类"}},[t._v("#")]),t._v(" 执行上下文的种类")]),t._v(" "),s("ol",[s("li",[t._v("全局执行上下文。"),s("br"),t._v("\n一个程序只会有一个全局上下文，也可以说是基本或者默认的上下文。任何不在函数内部的代码都处于全局上下文中。在浏览器环境下它将创建一个window对象，并将this指向这个对象。")]),t._v(" "),s("li",[t._v("函数执行上下文。"),s("br"),t._v("\n每当一个函数被调用的时候，就会创建一个属于这个函数的上下文，在这个上下文中执行函数。")]),t._v(" "),s("li",[t._v("Eval函数执行上下文。"),s("br"),t._v("\n暂略。")])]),t._v(" "),s("h4",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("p",[t._v("即调用栈。执行栈的最底部是全局执行上下文，每遇到一个函数调用就为其创建一个函数执行上下文并压入栈顶，执行完毕后从栈中弹出，所有代码执行完毕后引擎从栈中移除全局执行上下文。")]),t._v(" "),s("h3",{attrs:{id:"创建执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建执行上下文"}},[t._v("#")]),t._v(" 创建执行上下文")]),t._v(" "),s("p",[t._v("创建执行上下文的过程会发生三件事：")]),t._v(" "),s("ol",[s("li",[t._v("this的决定")]),t._v(" "),s("li",[t._v("创建词法环境组件")]),t._v(" "),s("li",[t._v("创建变量环境组件")])]),t._v(" "),s("h4",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("p",[t._v("this的指向分两种情况。当在全局执行上下文时，this指向一个window对象。当在函数执行上下文时，this指向调用函数的对象。严格模式下，全局执行上下文中的this是undefined")]),t._v(" "),s("h4",{attrs:{id:"词法环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境"}},[t._v("#")]),t._v(" 词法环境")]),t._v(" "),s("p",[s("strong",[t._v("什么是词法环境？")]),s("br"),t._v("\n简单地说，词法环境就是持有标识符——变量映射的结构。注意此处的标识符是指变量、函数等的名字，而变量指对数据的引用。"),s("br"),t._v(" "),s("strong",[t._v("词法环境的类型")]),s("br"),t._v(" "),s("strong",[t._v("全局词法环境")]),t._v("：包含对象环境记录器，外部环境引用（null）"),s("br"),t._v(" "),s("strong",[t._v("函数词法环境")]),t._v("：包含声明式环境记录器，外部环境引用（全局环境或者包含此函数的外部函数）"),s("br"),t._v("\n对象环境记录器用来定义出现在全局上下文中的函数和变量的关系，而声明式环境记录器存储变量、函数和参数，以及一个传递给函数的arguments对象（包含传递给函数的参数的length）")]),t._v(" "),s("p",[t._v("关系表如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("词法环境:")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("全局环境")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("函数环境")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("环境记录器:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象环境记录器")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("声明式环境记录器")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("外部引用:")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("全局环境或包含该函数的外部函数")])])])]),t._v(" "),s("h4",{attrs:{id:"变量环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量环境"}},[t._v("#")]),t._v(" 变量环境")]),t._v(" "),s("p",[s("strong",[t._v("什么是变量环境？")]),s("br"),t._v("\n变量环境也是词法环境，所以拥有上述的所有属性。"),s("br"),t._v(" "),s("strong",[t._v("变量环境和词法环境的不同：")]),s("br"),t._v("\n变量环境记录器和词法环境记录器都用来存储变量的声明语句，但是，词法环境记录器存储let、const和函数的声明，变量环境记录器存储var的声明。"),s("br"),t._v("\n在执行上下文的创建阶段，let和const的声明没有关联任何值，而var的声明关联了undefined值，这就是为什么可以在对var变量赋值前访问它，而同样访问let和const变量会报错，这就是变量声明提升。")]),t._v(" "),s("h3",{attrs:{id:"执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),s("p",[t._v("执行阶段，完成对变量的分配，最后执行代码。"),s("br"),t._v("\n如果引擎在let的声明位置没有找到实际的值，let变量会被赋值为undefined")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])])]),s("p",[t._v("以上理解来自：")]),t._v(" "),s("p",[t._v("2018-09-20 https://juejin.cn/post/6844903682283143181#heading-9")]),t._v(" "),s("h2",{attrs:{id:"词法环境-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-2"}},[t._v("#")]),t._v(" 词法环境")]),t._v(" "),s("p",[t._v("词法环境理论在很多语言中都存在，因此独立于ECMA标准理论概念。"),s("br"),t._v("\n相比于ES3中的变量对象、激活对象、作用域链等概念，词法环境更加抽象，也建议使用词法环境概念替代前者的描述。")]),t._v(" "),s("h3",{attrs:{id:"作用域-一个通用的理论概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域-一个通用的理论概念"}},[t._v("#")]),t._v(" 作用域——一个通用的理论概念")]),t._v(" "),s("h4",{attrs:{id:"什么是作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域"}},[t._v("#")]),t._v(" 什么是作用域？")]),t._v(" "),s("p",[t._v("作用域用来管理一个程序中不同部分变量和函数声明的可见性和生命周期，即对某个变量或方法具有访问权限的"),s("strong",[t._v("代码空间")]),t._v("。"),s("br"),t._v("\n作用域是封闭上下文，让我们能在程序中使用具有相同命名的不同变量。"),s("br"),t._v("\n同时也是逻辑边界。如全局变量和局部变量，两者的分类代表了其生命周期的逻辑边界。"),s("br"),t._v("\n作用域的特性：它是一种嵌套结构。（包含与被包含）"),s("br"),t._v("\nES6之前只有全局作用域和函数作用域，没有块级作用域。要实现块级作用域，只能通过立即执行函数IIFE或者try-catch语句。（ES6向ES5转换时，正是通过try-catch语法实现块级作用域）")]),t._v(" "),s("h4",{attrs:{id:"作用域类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域类型"}},[t._v("#")]),t._v(" 作用域类型")]),t._v(" "),s("p",[t._v("静态（词法）作用域和动态作用域。")]),t._v(" "),s("h5",{attrs:{id:"词法作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域"}},[t._v("#")]),t._v(" 词法作用域")]),t._v(" "),s("p",[t._v("词法：指程序上下文的一个属性，词法意义上的位置就是定义时所处的实际位置。"),s("br"),t._v("\n词法变量：采用词法作用域的变量。"),s("br"),t._v("\n环境：定义处周围的词法内容，即定义周围的代码块。"),s("br"),t._v("\n自由变量：函数内部遇到的，既不是形参，也不是在函数内定义的局部变量的变量，叫做自由变量。")]),t._v(" "),s("p",[t._v("静态代表着一个标识符所在的作用域和它的含义在程序解析阶段就被确定，所以一个变量定义在哪，就被约束于哪个作用域，这就是静态作用域。同时静态作用域也约束了自由变量的引用，在函数中遇到了自由变量，那么应该到定义函数的作用域中去查找这个变量。假如没有找到，就到更外围的作用域去查找。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10, 20 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10, 30")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10, 20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面的例子中，foo是在全局作用域中定义的，所以当函数运行时遇到自由变量x和y，就会到函数定义时的作用域即全局作用域查找。"),s("br"),t._v("\n词法作用域的优先级：可以看到，bar内部声明的y变量覆盖了外部的同名全局变量，因为包含变量定义的词法作用域拥有最高优先级。")]),t._v(" "),s("p",[s("strong",[t._v("总结：对于静态作用域，变量或函数所在的词法环境在定义时就被确定，是静态的，不变的，不会随着运行动态绑定。词法作用域中的函数遇到自由变量，到定义了这个函数的作用域查找。")])]),t._v(" "),s("p",[t._v("使用静态作用域的语言：C,Java,ECMAScript, Python, Ruby, Lua等等"),s("br"),t._v("\n以上理解来自："),s("br"),t._v("\n词法环境：通用理论https://blog.csdn.net/szengtal/article/details/78721665")]),t._v(" "),s("h5",{attrs:{id:"动态作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态作用域"}},[t._v("#")]),t._v(" 动态作用域")]),t._v(" "),s("p",[t._v("今天大部分主流编程语言不使用动态作用域。"),s("br"),t._v("\n动态作用域无法为变量创建闭包。"),s("br"),t._v("\n动态作用域会假设变量与值的关系不能在解析阶段被确定。变量和值不在词法环境中绑定，而是通过一个全局的动态变量栈来管理。每遇到一个变量声明，就把它压入栈顶，生命周期结束后弹出。调用者的环境将影响变量的解析。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// *pseudo* code – 使用动态作用域")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nprocedure "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nend \n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在当前的全局变量栈上，变名为y的变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前只拥有一个值20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {y: [20]} ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20, OK ")]),t._v("\nprocedure "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在这里变量栈上拥有两个y值{y: [20, 30]};")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//首先使用的是栈顶的")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因此:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30!, not 20")]),t._v("\nend \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面的伪代码很好的表现了动态作用域的特点。它不关心函数在哪里定义，只关心函数在哪里调用。"),s("strong",[t._v("动态作用域的作用域链基于调用栈，静态作用域的作用域链基于作用域嵌套。")])]),t._v(" "),s("p",[t._v("以上理解来自："),s("br"),t._v("\n词法环境——通用理论https://blog.csdn.net/szengtal/article/details/78722483")]),t._v(" "),s("h2",{attrs:{id:"标识符绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符绑定"}},[t._v("#")]),t._v(" 标识符绑定")]),t._v(" "),s("p",[t._v("即将一个标识符和一个对象绑定在一起。与绑定相关的两个操作分别是重绑定和改变。")]),t._v(" "),s("h4",{attrs:{id:"重绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绑定"}},[t._v("#")]),t._v(" 重绑定")]),t._v(" "),s("p",[t._v("将一个标识符从旧的对象上解除绑定，重新绑定到新的对象上。在ECMAscript中可以通过简单的赋值操作实现重绑定。"),s("br"),t._v("\n按共享传递：可以理解为一种特殊的按值传递，这个值是一个地址。当一个变量绑定了一个对象，把这个变量赋值给另一个变量时，仅仅是把对象的地址拷贝了一份赋值给第二个变量，因此这两个变量绑定了同一个对象。这就叫共享传递。ECMAscript中，当函数参数是引用类型时，使用的就是共享传递。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n   obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"peter"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// perter")]),t._v("\n")])])]),s("h4",{attrs:{id:"变动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变动"}},[t._v("#")]),t._v(" 变动")]),t._v(" "),s("p",[t._v("重绑定是将变量指向一个新的内存空间，而变动是在原来的内存空间上对内容进行修改。")]),t._v(" "),s("p",[t._v("以上理解来自："),s("br"),t._v("\n词法环境：通用理论https://blog.csdn.net/szengtal/article/details/78722559")]),t._v(" "),s("h2",{attrs:{id:"激活记录模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#激活记录模型"}},[t._v("#")]),t._v(" 激活记录模型")]),t._v(" "),s("p",[t._v("激活记录，又叫栈帧，是调用栈中的一种特殊数据结构。"),s("br"),t._v("\n激活记录被用来存储环境绑定。（包括形参和局部变量）"),s("br"),t._v("\n每当一个函数被激活（调用），就有一个激活记录被push到调用栈，函数返回后从栈中pop出。同时激活记录内的局部变量也被销毁。")]),t._v(" "),s("p",[t._v("ECMAScript中，调用栈被称为执行上下文栈，激活记录被称为激活对象（只在ES3中，ES5后激活对象这一概念被统一到环境模型中去）")]),t._v(" "),s("p",[t._v("ECMAScript管理函数执行的方式和以上方法逻辑相同，但具有很重要的不同点：当函数中存在闭包时，函数结束后，激活对象将不会从内存中销毁。ECMAScript中的激活对象不是存储在栈中而是堆中（基于堆），并且如果情况需要，所以的父级活动对象都会被存储。")]),t._v(" "),s("p",[t._v("类比于栈帧，ECMAScript中的激活对象被称为环境帧，与栈帧相区别。上述的存储过程可以这样表达：如果闭包引用了环境帧的内容，那么环境帧在函数结束后将继续存在。基于栈的活动记录的语言，如c语言，是无法做到这点的。以下的例子可以帮助更好的理解环境帧的概念。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//环境帧")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//闭包引用了来自环境帧的内容")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30")]),t._v("\n")])])]),s("h2",{attrs:{id:"环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境"}},[t._v("#")]),t._v(" 环境")]),t._v(" "),s("h3",{attrs:{id:"环境的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境的定义"}},[t._v("#")]),t._v(" 环境的定义")]),t._v(" "),s("p",[t._v("一个环境就是框架的一个序列，每个框架是包含着一些变量绑定的一个记录（可能为空）。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Global environment (GE)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过函数“foo”创建的环境(E1)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("q")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过函数“bar”创建的环境( (E2)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将“bar”返回到外部")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100")]),t._v("\n")])])]),s("p",[t._v("上面的例子中有三个环境，GE，E1，E2。对应全局环境，foo函数环境，bar函数环境。"),s("br"),t._v("\nGE环境有一个框架，就是它自己，全局框架。"),s("br"),t._v("\nE1环境有两个框架，foo和全局框架。"),s("br"),t._v("\nE2环境有三个框架，bar，foo和全局框架。")]),t._v(" "),s("p",[t._v("一个框架内，任何变量至多有一个绑定。"),s("br"),t._v("\n每一个框架有一个指向外围环境的指针。"),s("br"),t._v("\n全局框架的外围环境是null。"),s("br"),t._v("\n这些连起来的指针，或者说环境框架的序列就形成了作用域链。"),s("br"),t._v("\n一个变量在整个序列中都没有绑定，那么称这个变量是无约束的。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("[^这一段在阅读完函数创建和调用后再看]:")]),t._v(" "),s("p",[t._v("对于bar来说，x，y，z都是自由变量，因此需要到创建了bar函数的环境中去查找，找不到就再往上层环境查找。其实可以这样理解，bar在创建时生成了函数对象，而这个对象就保存了上层环境（即foo），因此可以找到foo里的变量。而foo本身没有使用自由变量，但由于bar使用到了自由变量x，且bar是在foo内部定义的，所以foo保存了foo外部的绑定信息，并将关于x绑定的信息传给深层的函数（即函数bar）")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"函数创建和调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数创建和调用"}},[t._v("#")]),t._v(" 函数创建和调用")]),t._v(" "),s("h3",{attrs:{id:"函数创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数创建"}},[t._v("#")]),t._v(" 函数创建")]),t._v(" "),s("p",[t._v("函数对象：函数在词法环境中创建后就生成相应的函数对象，无论该函数是否会被调用。"),s("br"),t._v("\n函数对象是一组由函数体和创建该函数的环境的指针的对偶。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// global "x"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 函数"foo"创建在全局环境下')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n通过伪代码来看生成的函数对象\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// create "foo" function')]),t._v("\n \nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functionObject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  code"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"console.log(x + y + z);"')]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数体")]),t._v("\n  environment"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建该函数的环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("一旦函数在词法环境中被创建，就生成对应的函数对象，存储函数体和外部环境的信息。")]),s("br"),t._v("\n从这个角度看，ECMAScript中所有的函数都是闭包，因为从被创建起就保存了上层环境。")]),t._v(" "),s("h3",{attrs:{id:"函数调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用"}},[t._v("#")]),t._v(" 函数调用")]),t._v(" "),s("p",[t._v("函数被调用时将建立一个新环境，包含所有形参实参，以及存储函数局部变量绑定的框架。")]),t._v(" "),s("h2",{attrs:{id:"函数式参数问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式参数问题"}},[t._v("#")]),t._v(" 函数式参数问题")]),t._v(" "),s("p",[t._v("首先了解以下几个概念：")]),t._v(" "),s("h3",{attrs:{id:"一类函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一类函数"}},[t._v("#")]),t._v(" 一类函数")]),t._v(" "),s("p",[t._v("第一类函数指可以像普通数据一样赋值给其他变量或结构，可以在运行时用字面量创建，可以作为参数传递，可以作为返回值从其他函数返回的函数。ECMAScript中所有函数都是一类函数。")]),t._v(" "),s("h3",{attrs:{id:"函数式参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式参数"}},[t._v("#")]),t._v(" 函数式参数")]),t._v(" "),s("p",[t._v("当函数被作为参数传入另一个函数时，这个参数就叫函数式参数。")]),t._v(" "),s("h3",{attrs:{id:"高阶函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[t._v("#")]),t._v(" 高阶函数")]),t._v(" "),s("p",[t._v("接收函数式参数的函数，称为高阶函数。")]),t._v(" "),s("h3",{attrs:{id:"自由变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自由变量"}},[t._v("#")]),t._v(" 自由变量")]),t._v(" "),s("p",[t._v("既不是形参也不是函数内部定义的局部变量的变量，称为自由变量。")]),t._v(" "),s("h4",{attrs:{id:"第一类问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一类问题"}},[t._v("#")]),t._v(" 第一类问题")]),t._v(" "),s("blockquote",[s("p",[t._v("一个内部函数作为返回值从它的父函数被返回。当这个内部函数使用了来自创建它的父函数的自由变量，在父函数运行结束后（父函数的环境被销毁），这个返回的内部函数该如何继续访问那些父函数中的自由变量？")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("emsp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("emsp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("看下面例子：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30")]),t._v("\n")])])]),s("p",[t._v("答案：词法作用域中，会将函数的上层环境框架存在堆里。")]),t._v(" "),s("h4",{attrs:{id:"第二类问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二类问题"}},[t._v("#")]),t._v(" 第二类问题")]),t._v(" "),s("blockquote",[s("p",[t._v("一个使用自由变量的函数被作为参数传递给另外一个函数时，这个参数函数使用的自由变量应该去哪查找，是这个参数函数定义时所在的作用域还是执行这个参数函数所在的作用域?")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("funArg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("funArg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10, not 20")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个参数函数")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自由变量x")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("答案：由于静态作用域，会到函数定义时所在的作用域查找。")]),t._v(" "),s("h2",{attrs:{id:"通用理论总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用理论总结"}},[t._v("#")]),t._v(" 通用理论总结")]),t._v(" "),s("ol",[s("li",[t._v("环境的概念与作用域的概念有关。")]),t._v(" "),s("li",[t._v("理论中有两种作用域类型：动态和静态（词法）作用域")]),t._v(" "),s("li",[t._v("ECMAScript使用静态（词法）作用域\n然而，with和eval语法可以为静态作用域带来动态性。")]),t._v(" "),s("li",[t._v("诸如作用域，环境，激活对象，激活记录，栈帧，环境帧，环境记录甚至执行上下文等概念—都是用于讨论的近义词（译注:为什么会用这些词，原文以及译注中都有提及）。因此，从ECMAScript的技术角度来说，它们中的一些是另一个的一部分—例如，一个环境记录项是词法环境的一部分，而词法环境又是执行环境的一部分。然而，从逻辑上来收，它们这些抽象定义几乎可以互换使用。因此下面哪一个都是正常的称呼：“全局作用域”，“全局环境”，“全局上下文”，等等。")]),t._v(" "),s("li",[t._v("ECMAScript使用链式环境框架模型，在ES3中被称为作用域链。在ES5中环境框架被叫做环境记录项。")]),t._v(" "),s("li",[t._v("一个环境可以被多个内部环境当做它们的外层环境。")]),t._v(" "),s("li",[t._v("词法环境被用来实现闭包，以及解决了函数式参数的问题。")]),t._v(" "),s("li",[t._v("ECMAScript中所有函数都是一类函数")])]),t._v(" "),s("p",[t._v("以上理解来自："),s("br"),t._v("\n词法环境：通用理论https://blog.csdn.net/szengtal/article/details/78722826")])])}),[],!1,null,null,null);a.default=r.exports}}]);