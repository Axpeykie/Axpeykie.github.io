(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{386:function(t,e,n){"use strict";n.r(e);var r=n(40),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"闭包的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包的定义"}},[t._v("#")]),t._v(" 闭包的定义")]),t._v(" "),n("p",[t._v("ECMA-262-5中对闭包的定义：")]),t._v(" "),n("blockquote",[n("p",[t._v("A closure is a pair consisting of the function code and the environment in which the function is created.")])]),t._v(" "),n("p",[t._v("翻译过来就是，闭包（closure）是函数体和创建函数的环境组成的一对组合。"),n("br"),t._v("\nECMAScript使用的是词法作用域，因此当函数体中遇到自由变量时，会到创建了这个函数的词法环境查找，表现出来就是函数能够访问外部的作用域。实际上，每当一个函数在词法环境中被创建出来之后，就会生成一个函数对象，保存它的上层环境，所以从这个角度来看ECMAScript中所有函数都是闭包。ES的闭包特性也说明它管理函数调用的方式和基于栈的语言不同，是基于堆的。即使一个函数的上下文已经完成，只要它内部定义的函数还没有被销毁，环境栈就会一直存在，局部变量会一直保存在内存里。")])])}),[],!1,null,null,null);e.default=s.exports}}]);